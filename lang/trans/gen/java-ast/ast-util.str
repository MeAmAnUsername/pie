module gen/java-ast/ast-util

imports

  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/lexical/-
  signatures/java/types/-
  signatures/java/classes/-

rules

  // add-import: str -> ast
  //   type: String -> Java AST
  // Convert the given import string into an import Java AST.
  // Add that import Java AST to dynamic rule JavaImports
  // returns the Java AST
  add-import: str -> ast
  with
    ast := <parse-import> str
  ; rules (JavaImports :+= ast)

  // parse-import: str -> result
  //   type: String -> Java AST
  // Convert the given import string into an import Java AST.
  parse-import: str -> result
  where
    <is-string> str
  with
    parts := <string-tokenize(|".")> str
  ; result := SingleTypeImport(TypeName(<parse-import-parts> <reverse> parts))
  
  parse-import-parts: [part | []] -> Id(part)
  parse-import-parts: [part | rest] -> PackageOrTypeName(<parse-import-parts> rest, part)

  p2j-ast-wrap-string-with-id: str -> Id(str)

  // java-classType-to-unnanType: removes the list of annotations from a ClassType
  java-classType-to-unannType: ClassType(_, name, types) -> ClassType(name, types)
  java-classType-to-unannType:
    ClassOrInterfaceTypeMember(toplevelclass, annotations, name, types) -> ClassOrInterfaceTypeMember(
      <java-classType-to-unannType> toplevelclass
    , annotations
    , name
    , types
    )
  java-classType-to-unannType: x -> x
    where
      <not(?ClassType(_, _, _)); not(?ClassOrInterfaceTypeMember(_, _, _, _))> x
