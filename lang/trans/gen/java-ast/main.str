module gen/java-ast/main

imports

  nabl2/api
  
  gen/util
  gen/java-ast/func_def

  signatures/java/packages/-
  signatures/java/names/-
  signatures/java/classes/-
  signatures/java/lexical/-
  signatures/java/types/-

  pp

  libspoofax/stratego/debug

rules

  generate-java-file-ast:
    (pieAst, _, _, file, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"java")> file
    ; mod      := <base-filename;remove-extension> file
    ; javaAst  := <p2j-ast(|mod, ["mb", "pie", "lang", "test"])> pieAst
    ; <debug(|"Successfully transpiled file to Java: ")> file
    ; result   := <p2j-ast-to-filestring(|mod)> javaAst
    ; <debug(|"Successfully transformed Java AST to string: ")> file

rules

  p2j-ast-to-filestring(|mod):
    ast -> 
$[// This file was generated from Pie source file [mod].pie.
[<pp-java-string> ast]
// last cache update: 2019-12-16 12:57
]

  p2j-ast(|mod, package):
    Program(defs) -> result
    with
    {| AstAnalysis, ModuleBindings:
      <pie-set-ast-analysis> defs
    ; classes      := <filter(p2j-ast-def)> defs
    ; bindings     := <bagof-ModuleBindings>
    |}
    with
      result := CompilationUnit(
        Some(PackageDeclaration(
          []
        , <map(p2j-ast-wrap-string-with-id)> package
        ))
      , [ SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("com")), Id("google"))
              , Id("inject")
              )
            , Id("Inject")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("api")
              )
            , Id("ExecContext")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("api")
              )
            , Id("ExecException")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("api")
              )
            , Id("None")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("api")
              )
            , Id("TaskDef")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(
                    PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
                  , Id("api")
                  )
                , Id("stamp")
                )
              , Id("resource")
              )
            , Id("FileSystemStampers")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
                , Id("taskdefs")
                )
              , Id("guice")
              )
            , Id("TaskDefsModule")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("util")
              )
            , Id("Tuple2")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("util")
              )
            , Id("Tuple3")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("util")
              )
            , Id("Tuple4")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("util")
              )
            , Id("Tuple5")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("pie"))
              , Id("util")
              )
            , Id("Util")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("resource"))
              , Id("fs")
              )
            , Id("FSResource")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("resource"))
                , Id("fs")
                )
              , Id("match")
              )
            , Id("PathResourceMatcher")
            )
          )
        , TypeImportOnDemand(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("resource"))
                , Id("fs")
                )
              , Id("path")
              )
            , Id("match")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("resource"))
              , Id("fs")
              )
            , Id("FSPath")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(PackageOrTypeName(Id("mb")), Id("resource"))
                , Id("fs")
                )
              , Id("walk")
              )
            , Id("PathResourceWalker")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(
                  PackageOrTypeName(
                    PackageOrTypeName(PackageOrTypeName(Id("org")), Id("checkerframework"))
                  , Id("checker")
                  )
                , Id("nullness")
                )
              , Id("qual")
              )
            , Id("Nullable")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
            , Id("Serializable")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
            , Id("ArrayList")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
            , Id("Arrays")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
            , Id("Objects")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
              , Id("stream")
              )
            , Id("Collectors")
            )
          )
        , SingleTypeImport(
            TypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
              , Id("stream")
              )
            , Id("Stream")
            )
          )
        ]
      , <concat> [ 
          classes
        , [ ClassDeclaration(
              []
            , Id($[TaskDefsModule_[<pie-sanitize-class-id> mod]])
            , None()
            , Some(SuperClass(ClassType([], Id("TaskDefsModule"), None())))
            , None()
            , [ MethodDecl(
                  [MarkerAnno(TypeName(Id("Override"))), Protected()]
                , MethodHeader(Void(), Id("bindTaskDefs"), NoParams(), [], None())
                , Block(bindings)
                )
              ]
            )
          ]
        ]
      )
      // Note: meaning of this AST:
      //   package [package];
      //   
      //   import com.google.inject.Inject;
      //   import mb.pie.api.ExecContext;
      //   import mb.pie.api.ExecException;
      //   import mb.pie.api.None;
      //   import mb.pie.api.TaskDef;
      //   import mb.pie.api.stamp.resource.FileSystemStampers;
      //   import mb.pie.taskdefs.guice.TaskDefsModule;
      //   import mb.pie.util.Tuple2;
      //   import mb.pie.util.Tuple3;
      //   import mb.pie.util.Tuple4;
      //   import mb.pie.util.Tuple5;
      //   import mb.pie.util.Util;
      //   import mb.resource.fs.FSResource;
      //   import mb.resource.fs.match.PathResourceMatcher;
      //   import mb.resource.fs.path.match.*;
      //   import mb.resource.fs.FSPath;
      //   import mb.resource.fs.walk.PathResourceWalker;
      //   import org.checkerframework.checker.nullness.qual.Nullable;
      //   
      //   import java.io.Serializable;
      //   import java.util.ArrayList;
      //   import java.util.Arrays;
      //   import java.util.Objects;
      //   import java.util.stream.Collectors;
      //   import java.util.stream.Stream;
      //   
      //   [classes]
      //   
      //   class TaskDefsModule_[<pie-sanitize-class-id> mod] extends TaskDefsModule {
      //     @Override
      //     protected void bindTaskDefs() {
      //       [bindings]
      //     }
      //     
      //     // last cache update: 2019-06-27 00:48
      //   }

  p2j-ast-wrap-string-with-id: str -> Id(str)
