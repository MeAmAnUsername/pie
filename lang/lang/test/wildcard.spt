module wildcard
language pie

fixture [[
  module test:wildcard

  data Fruit = foreign java test.wildcard.Fruit {}
  data Apple : Fruit = foreign java test.wildcard.Apple {}
  data Pear : Fruit = foreign java test.wildcard.Banana {}

  data List<T> = foreign java java.util.List {
    func add(T) -> unit
  }

  [[...]]
]]

test pass to parameter with lower bounded wildcard parameter [[
  func test(list: List<_ -: Fruit>, apple: Apple) -> unit = list.add(apple)
]] analysis succeeds

// Adding Apple is not allowed because it could be List<Banana>
test pass to parameter with upper bounded wildcard parameter [[
  func test(list: List<_ : Fruit>, apple: Apple) -> unit = list.add([[apple]])
]] 1 error at #1
   error like "Type mismatch"

// Least upper bound (lub)
test Least upper bound of parameterized list takes wildcard of lub [[
  func test1(apples: List<Apple>, pears: List<Pear>) -> List<_ : Fruit> =
    if (true) apples else pears
]] analysis succeeds
test Cannot assign lub(List<Apple>, List<Pear>) to List<Fruit> [[
  func test1(apples: List<Apple>, pears: List<Pear>) -> List<Fruit> =
    [[if (true) apples else pears]]
]] 1 error at #1
   error like "Type mismatch"
test Cannot assign lub(List<Fruit>, List<Pear>) to List<Fruit> [[
  func test1(fruit: List<Fruit>, pears: List<Pear>) -> List<Fruit> =
    [[if (true) fruit else pears]]
]] 1 error at #1
   error like "Type mismatch"
