module type_signature
language pie

fixture [[
  module test:dataDef:generics
  
  data Food = foreign java test.dataDef.generics.Food {}
  data Fruit : Food = foreign java test.dataDef.generics.Fruit {}
  data Apple : Fruit = foreign java test.dataDef.generics.Apple {}
  
  [[...]]
]]

test generic parameters omitted param list [[ [[data Foo = foreign java Foo {} ]] ]]
  analysis succeeds
  run desugar-all on #1 to DataDef(_, _, GenericParams([]), _, _)
test generic parameters empty param list [[ data Foo<> = foreign java Foo {} ]] analysis succeeds
test generic parameters single param unbound [[ data Foo<[[T]]> = foreign java Foo {} ]] analysis succeeds  run pie-get-type on #1 to TopType()
test generic parameters single param bound [[ data Foo<[[T]]: [[Food]]> = foreign java Foo {} ]] analysis succeeds  run pie-get-type on #1 to DataType(_)
test generic parameters shadow existing name [[ data Foo<[[Apple]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to TopType()
  1 note at #1
  note like "shadows data type"
test generic parameters reference own type [[ data [[Foo]]<[[T]]: [[Foo]]<[[T]]>> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #2 to DataType(_)
  resolve #3 to #1
  resolve #4 to #2
test generic parameters bound is unit [[ data Foo<[[T]]: [[unit]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to UnitType()
  1 warning at #2
  warning like "unit does not have subtypes"
test generic parameters bound is list [[ data Foo<[[T]]: [[Food*]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to ListType(DataType(_))
  1 warning at #2
  warning like "list types do not have subtypes"
test generic parameters bound is tuple [[ data Foo<[[T]]: [[(path, Fruit)]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to TupleType([PathType(), DataType(_)])
  1 warning at #2
  warning like "tuple types do not have subtypes"
test generic parameters bound is supplier [[ data Foo<[[T]]: [[supplier<string>]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to SupplierType(StrType())
test generic parameters allow list type [[ data Foo<T: Bar*> : Object = foreign java Foo {} ]] parse succeeds
test generic parameters allow tuple type [[ data Bar<T: (Foo, Bak)> : Object = foreign java Foo {} ]] parse succeeds

test generic parameters two params unbound [[ data Foo<[[T]], [[R]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to TopType()
  run pie-get-type on #2 to TopType()
test generic parameters two params first bound [[ data Foo<[[T]]: Apple, [[R]]> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to DataType(_)
  run pie-get-type on #2 to TopType()
test generic parameters two params second bound [[ data Foo<[[T]], [[R]]: string> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to TopType()
  run pie-get-type on #2 to StrType()
test generic parameters two params both bound [[ data Foo<[[T]]: int?, [[R]]: bool> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to NullableType(IntType())
  run pie-get-type on #2 to BoolType()
test generic parameters two duplicate name [[ data Foo<[[T]], [[T]]> = foreign java Foo {} ]]
  2 errors at #1, #2
  run pie-get-type on #1 to TopType()
  run pie-get-type on #2 to TopType()
  error like "Duplicate definition of generic parameter"
// test disabled: Statix does not terminate on circular generic references
//test generic parameters two params circular reference [[
//  data Foo<[[T]]: Foo<[[R]], [[R]]>, [[R]]: Foo<[[T]], [[R]]>> = foreign java Foo {}
//]]
//   analysis succeeds
//   run pie-get-type on #1 to DataType(_)
//   run pie-get-type on #2 to DataType(_)
//   resolve #2 to #4
//   resolve #3 to #4
//   resolve #5 to #1
//   resolve #6 to #4
test generic parameters two params both bound [[ data Foo<[[T]]: int?, [[R]], [[U]]: bool> = foreign java Foo {} ]]
  analysis succeeds
  run pie-get-type on #1 to NullableType(IntType())
  run pie-get-type on #2 to TopType()
  run pie-get-type on #3 to BoolType()
