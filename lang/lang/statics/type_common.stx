module statics/type_common

imports

  signatures/constructors-sig
  statics/base
  statics/type
  statics/common

rules

  /**
   * getScopeFromType(s, ty)
   * Returns the scope with methods associated with type [ty]
   */
  getScopeFromType : scope * TYPE -> scope
  getScopeFromType(_, DataType(s_data)) = s_data.
  getScopeFromType(s, ty) = emptyScope(s).

  /**
   * typeOrTopType(upper_bound) = ty
   * Get the type from an explicit upper bound or the top type if there is no
   * upper bound.
   */
  typeOrTopType : UpperBoundType -> TYPE
  typeOrTopType(NoUpperBoundType()) = TopType().
  typeOrTopType(UpperBoundType(ty)) = ty.

  /**
   * typeOrBottomType(lower_bound) = ty
   * Get the type from an explicit lower bound or the bottom type if there is
   * no lower bound.
   */
  typeOrBottomType : LowerBoundType -> TYPE
  typeOrBottomType(NoLowerBoundType()) = BottomType().
  typeOrBottomType(LowerBoundType(ty)) = ty.

  /**
   * getTypeArgsList(type_args) = type_args_list
   * Gets the list of type arguments from a TypeArgs.
   * Returns an empty list for NoTypeArgs().
   */
  getTypeArgsList : TypeArgs -> list(Type)
  getTypeArgsList(NoTypeArgs()) = [].
  getTypeArgsList(TypeArgs(type_args)) = type_args.

  /**
   * findGenericDef(s_data) -> s_data_def
   * Finds the generic definition of a data type [s_data].
   * [s_data] can be a generic definition, in which case it itself will be
   * returned.
   */
  // Get generic definition of s_data. s_data can be either an instance or the generic def itself.
  findGenericDef : scope -> scope
  findGenericDef(s_data) = getScope(occ) :-
    query () filter P? min P < $ in s_data |-> [occ].

  /**
   * getGenericDef(s_data_instance) -> s_data_def
   * Gets the generic definition of a data type instance [s_data_instance].
   * [s_data_instance] cannot be a generic definition, it must be an instance.
   */
  getGenericDef : scope -> scope
  getGenericDef(s_data_instance) = getScope(occ) :-
    query () filter P in s_data_instance |-> [occ].

  /**
   * getTypeArgs(s_data) = type_args
   * Get all type arguments defined in s_data.
   * Does not follow any edges.
   */
  getTypeArgs : scope -> list((TYPEID * TYPE))
  getTypeArgs(s_data) = getArgTypes(occs) :-
    query generic_arg filter e in s_data |-> occs.

    getArgType : (path * (TYPEID * TYPE)) -> (TYPEID * TYPE)
    getArgTypes maps getArgType(list(*)) = list(*)
    getArgType((path, arg_ty)) = arg_ty.

  /**
   * getTypeArgType(type_arg) -> type
   * Gets the type of a type argument, i.e. the type that the type parameter is
   * bound to by this type argument.
   */
  getTypeArgType : (TYPEID * TYPE) -> TYPE
  getTypeArgTypes maps getTypeArgType(list(*)) = list(*)
  getTypeArgType((_, ty)) = ty.
