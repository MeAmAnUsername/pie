module statics/data

imports

  signatures/constructors-sig
  signatures/data-sig
  statics/base
  statics/type
  statics/util
  statics/func_def

rules

  dataDefOk : scope * DataDef
  dataDefOk(s, DataDef(DataDefMods(mods), name, generic_params, super, impl)) :- {s_data_def}
    dataDefModsOk(mods),
    new s_data_def,
    !root[getRoot(s)] in s_data_def,
    setFileIfExists(s, s_data_def),
    setContext(s_data_def, "data_name_unqualified", ContextName(name)),
    !data_mods[mods] in s_data_def,
    genericParamsOk(s, s_data_def, generic_params),
    declareData(s, name, s_data_def),
    declareLocalData(s, name, s_data_def),
    superOk(s, s_data_def, super, name),
    dataImplOk(s, s_data_def, impl).

  dataDefModsOk : list(DataDefMod)
  dataDefModsOk([]).
  dataDefModsOk([mod|mods1]) :- {mods2}
    dataDefModsOk_1(mods1, mod) == mods2,
    dataDefModsOk(mods2).

    // checks that mods list does not contain a duplicate modifier
    // returns list with duplicates removed
    dataDefModsOk_1 : list(DataDefMod) * DataDefMod -> list(DataDefMod)
    dataDefModsOk_1([], _) = [].
    dataDefModsOk_1([mod|mods], mod) = mods_out :-
      dataDefModsOk_1(mods, mod) == mods_out,
      false | error $[Duplicate modifier [mod]] @mod.
    dataDefModsOk_1([mod1|mods], mod2) = [mod1|mods_out] :-
      dataDefModsOk_1(mods, mod2) == mods_out.

  genericParamsOk : scope * scope * GenericParams
  genericParamsOk(s, s_data_def, GenericParams(params)) :-
    {parameters}
    typeOfgenericParams(s, s_data_def, params) == parameters,
    !generic_params[parameters] in s_data_def.

    typeOfgenericParam : scope * scope * GenericParam -> (GenericParameter * TYPE * TYPE)
    typeOfgenericParams maps typeOfgenericParam(*, *, list(*)) = list(*)
    typeOfgenericParam(s, s_data_def, GenericParam(name, upper_bound, lower_bound)) = (param, upper_bound_ty, lower_bound_ty) :-
      {upper_error_node lower_error_node}
      bothBoundsOk(upper_bound, lower_bound),
      typeOrTopType(typeOfUpperBound(s, s_data_def, upper_bound)) == upper_bound_ty,
      typeOrBottomType(typeOfLowerBound(s, s_data_def, lower_bound)) == lower_bound_ty,
      declareGenericParam(s_data_def, name, upper_bound_ty, lower_bound_ty) == param,
      try { resolveData(s, name) == [] } | note $[Generic parameter [name] shadows data type [name]] @name.

      typeOrTopType : UpperBoundType -> TYPE
      typeOrTopType(NoUpperBoundType()) = TopType().
      typeOrTopType(UpperBoundType(ty)) = ty.

      typeOrBottomType : LowerBoundType -> TYPE
      typeOrBottomType(NoLowerBoundType()) = BottomType().
      typeOrBottomType(LowerBoundType(ty)) = ty.

  superOk : scope * scope * SuperType * string
  superOk(s, s_data_def, NoSuperType(), name).
  superOk(s, s_data_def, SuperType(data_ty@DataTy(_, super_name, _)), name) :- {s_super occs}
    typeOfDataTy(s, s_data_def, data_ty) == DataType(s_super),
    // todo: check that provided type arguments (type_args) are compatible with type parameters (super.
    s_data_def -INHERIT-> s_super,
    inherits(s_super, s_data_def) == FALSE() | error $[Cannot (indirectly) inherit from self. [super_name] is already an (indirect) subtype of [name]] @super_name,
    query func filter e in s_data_def |-> occs,
    superOk_1s(s_super, occs).

    // check that all functions of current are valid overrides of super.
    superOk_1 : scope * (path * (FUNCID * TYPE))
    superOk_1s maps superOk_1(*, list(*))
    superOk_1(s_super, (_, (name, func_ty))) :- {occs}
      resolveFunc(s_super, name) == occs,
      superOk_2s(func_ty, occs, name).

    // Check that function is either a valid override or not an override
    superOk_2 : TYPE * (path * (FUNCID * TYPE)) * FUNCID
    superOk_2s maps superOk_2(*, list(*), *)
    superOk_2(FuncType(param_tys, ty_out), (path, (name_super, FuncType(param_tys_super, ty_out_super))), name) :-
        superOk_3(isAllAssignableTo(param_tys_super, param_tys), name, ty_out, name_super, ty_out_super).

    superOk_3 : BOOLEAN * TYPEID * TYPE * TYPEID * TYPE
    superOk_3(FALSE(), _, _, _, _).
    superOk_3(TRUE(), name, ty_out, name_super, ty_out_super) :-
      @name.ref := name_super,
      isAssignableTo(ty_out, ty_out_super) == TRUE() | error $[Type mismatch: incompatible return type for override] @name.

  dataImplOk : scope * scope * DataImpl
  dataImplOk(s, s_data, JavaDataImpl(java_name, members)) :-
    setContext(s_data, "foreign_java_impl", ContextName(java_name)),
    javaDataMembersOk(s, s_data, members).

  javaDataMemberOk : scope * scope * JavaDataMemb
  javaDataMembersOk maps javaDataMemberOk(*, *, list(*))
  javaDataMemberOk(s, s_data, JavaFuncDef(func_head)) :- {name ty}
    typeOfFuncHead(s, s_data, func_head) == (_, name, ty),
    declareFunc(s_data, name, ty, JavaForeignFuncKind()).


  getDataName : scope -> TYPEID
  getDataName(s) = name :-
    getContext(s, "data_name_unqualified") == ContextName(name).
